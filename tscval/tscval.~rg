<<<<<<< HEAD
'Author: James Lamb, Abbott Economics

'Motivation: Perform rolling time-series corss validation.

'Description: 
' 	Program which takes an equation, rolls the sample, keeps producing forecasts,
' 	then stacks up vectors by horizon and computes errors at different horizons.
' 	Returns a few objects in the wf:
'		1. T_ACC --> a table with the eq name and error (see below) by forecast horizon
'		2. V_{%eq}_{%ERR_MEASURE} --> a vector for the given equation, where element 1 is 1-step-ahead, elem 2 is 2-step, etc.

'##########################################################################################################
'##########################################################################################################
'##########################################################################################################
setmaxerrs 1
mode quiet
logmode logmsg
logmsg

'NOTE: Currently only supports equation objects (no VARs)
		
!debug = 1 'set to 1 if you want the logmsgs to display

if !debug = 0 then
	logmode +addin
endif
		
'check that an object exists
%type = @getthistype
if %type="NONE" then
	@uiprompt("No object found, please open an Equation or VAR object")
	stop
endif
		
'check that {%eq} object is an equation or VAR
if %type<>"EQUATION" then
	@uiprompt("Procedure can only be run from an Equation or VAR object")
	stop
endif

'STEP 1: Figure out if the add-in is run through GUI or programmatically
!dogui=0

logmsg Looking for Program Options
if not @hasoption("PROC") then
	'this is run through GUI
	logmsg This is rung through GUI
	!dogui=1
endif


'--- Environment Info ---'
logmsg Getting Environment Info
%freq = @pagefreq 'page frequency
%pagesmpl = @pagesmpl
%pagename = @pagename
%pagerange = @pagerange
%wf = @wfname
%eq = _this.@name 'get the name of whatever we're using this on
%command = {%eq}.@command 'command to re-estimate (with all the same options) 


''If the add-in is invoked through GUI
!result=0
'Set up the GUI
if !dogui = 1 then
	!keep = 0
	%error_types = " ""MSE"" ""MAE"" ""RMSE"" ""MSFE"" ""medAE"" ""MAPE"" ""SMAPE"" ""MPE"" ""MSPE"" ""RMSPE"" ""medPE"" ""Correct sign (count)"" ""Correct sign (%)"" " 			
	'Initialize with reasonable values
	%holdout = "0.10" 'default to testing over 10% of the training range
	%fullsample = %pagerange '%training_range
	%err_measure = "MAE"
	!keep = 0
			
	!result = @uidialog("edit", %fullsample, "Sample", "edit", %holdout, "Maximum % of the training range to hold out", _
		"list", %err_measure, "Preferred error measure", %error_types, "Check", !keep, "Keep the forecast series objects?" )	
	'Map human-readable values to params
	if %err_measure = "Correct sign (count)" then
		%err_measure = "SIGN"
	endif
	if %err_measure = "Correct sign (%)" then
		%err_measure = "SIGNP"
	endif		
	!holdout = @val(%holdout)	
endif


'choose dialog outcomes
if !result = -1 then 'will stop the program unless OK is selected in GUI
	logmsg CANCELLED
	STOP
endif

if !dogui =0 then 'extract options passed through the program or use defaults if nothing is passed
	%fullsample  = @equaloption("SAMPLE") 
	!holdout = @val(@equaloption("H"))
	%err_measure = @equaloption("ERR") 
	!keep = @val(@equaloption("K"))
endif

'Create new page for subsequent work
!counter=1
while @pageexist(%pagename+@str(!counter))
	!counter=!counter+1
wend

%newpage = %pagename+@str(!counter)

pagecreate(page={%newpage}) {%freq} {%pagesmpl}

'copy relevant information
wfselect {%wf}\{%pagename}

'Grab a bit of information from the equation
%reggroup = @getnextname("g_")
%regmat = @getnextname("mat_")
{%eq}.makeregs {%reggroup}
%regvars = @wunique({%reggroup}.@depends)
%depvar = @word({%reggroup}.@depends,1) 'dependent variable without transformations

'Re-work the training range if needed
smpl @all
stomna({%reggroup}, {%regmat}) 'the matrix will help find earliers and latest data to figure out appropriate data sample

%earliest = @otod(@max(@cifirst({%regmat})))
%latest = @otod(@min(@cilast({%regmat})))

'If training range interval is wider than available range interval, replace declared training range with available data range
if @dtoo(%earliest) > @dtoo(@word(%fullsample,1)) then
	%fullsample = @replace(%fullsample, @word(%fullsample,1), %earliest)
endif
 
if @dtoo(%latest) < @dtoo(@word(%fullsample,2)) then
	%fullsample = @replace(%fullsample, @word(%fullsample,2), %latest)
endif
		
smpl %pagesmpl 'reset the sample back to what it was
delete {%regmat} {%reggroup}

%reggroup = @getnextname("g_")
group {%reggroup} {%regvars}
'copy all base series that are needed to the new page
copy(g=d) {%pagename}\{%reggroup} {%newpage}\
copy {%pagename}\{%eq} {%newpage}\
delete %reggroup

'move to the new page
wfselect {%wf}\{%newpage}

'---- Date format ----'
%freq = @pagefreq
	
if %freq = "A" then 
	%date_format = "YYYY"
else
	if %freq = "Q" then
		%date_format = "YYYY[Q]Q"
	else
		if %freq = "M" then
			%date_format = "YYYY[M]MM"
		else
			if @wfind("W D5 D7 D", %freq) <> 0 then
				%date_format = "MM/DD/YYYY"
			endif
		endif
	endif
endif   
'-----------------------'

'STEP 1: Cut Sample into Training and Testing Ranges
'count # of obs in the training set
logmsg STEP 1: Checking/Modifying Samples - Cut Sample into Training and Testing Ranges
!trainobscount  = @round((@dtoo(@word(%fullsample,2))-@dtoo(@word(%fullsample,1)))*(1-!holdout))
!test = @dtoo(@word(%fullsample,2))-@dtoo(@word(%fullsample,1))
%shorttrainend = @otod(!trainobscount+@dtoo(%earliest)) 'this is the end of the training sample
%longfcststart = @otod(@dtoo(%shorttrainend)+1)'where longest forecast begins
!toteqs = @dtoo(@word(%fullsample,2))-@dtoo(%shorttrainend) 'total numbers of estimations

'STEP 2: Running Estimates
logmsg STEP 2: Running Estimates

'%forecasts = ""
'Vector Name Lists that Need to Be Populated

%v_err = ""
%v_err_pc = ""

%vectornamelists = "v_err v_err_pc" 'list of vector namelists

%forecastseries = ""
for !i = 0 to !toteqs-1
	'Date Strings
	%trainend = @otod(@dtoo(%shorttrainend)+!i) 'end of the training sample (incremented by 1 in each loop step)
	%trainstart = @word(%fullsample,1) 'beginning of the training sample
	%fcststart = @otod(@dtoo(%trainend)+1) 'forecasting begins after training sample ends
	%fcstend = @word(%fullsample,2) 'end of the forecast
	'Estimate the model over this sample
	smpl %trainstart %trainend
	{%eq}.{%command} 're-estimate the equation
	'Forecast the model over this sample
	smpl %fcststart %fcstend
	{%eq}.forecast(f=actual) {%depvar}_f_{%fcststart} 'create forecasts
	%forecastseries  = %forecastseries + %depvar+"_f_"+%fcststart+" " 'list of all forecasted series
	'*****Calculate Errors
		'ERROR 1: Absolute Errors
		smpl @all
		series ERR_{%fcststart} ={%depvar} - {%depvar}_f_{%fcststart}
		if @isobject("smpl") then
			delete smpl
		endif
		sample smpl %longfcststart %fcstend
		vector V_ERR_{%fcststart} = @convert(ERR_{%fcststart}, smpl) 'convert to vector
		%v_err = %v_err + "V_ERR_"+ %fcststart + " " 'populate vector namelist
		
		'ERROR 2: Percentage Errors
		smpl @all
		series ERR_PC_{%fcststart} = (({%depvar} - {%depvar}_f_{%fcststart})/{%depvar})*100
		if @isobject("smpl") then
			delete smpl
		endif	
		sample smpl %longfcststart %fcstend	
		vector V_ERR_PC_{%fcststart} = @convert(ERR_PC_{%fcststart}, smpl)
		%v_err_pc = %v_err_pc + "V_ERR_PC_"+%fcststart+" " 'populate vector namelist
		
		'ERROR 3: Sign Erors (should be over the horizon. So 2 step ahead asks: "Did we correctly predict the direction of change between two periods ago and today?")
		
		'LEAVE FOR LATER
	'*****		
	'%forecasts = %forecasts + %depvar+"_f_"+%fcststart+" " 'creating a list of all series that are forecasted
	smpl @all
next

'STEP 3: Create Vectors with N-Step Ahead Error
logmsg STEP 3: Create Vectors with N-Step Ahead Error

for %list {%vectornamelists}
	if @isobject("m_matrix") then
		delete m_matrix
	endif
	
	matrix(!toteqs, !toteqs) m_matrix
	!count=1
	
	if @isobject("dropvector") then
		delete dropvector
	endif
	
	vector(!toteqs) dropvector=0
	for !i=1 to !toteqs
		dropvector(!i) = !i
	next
	
	'Create Vectors with N-Step Ahead Error
	%e_{%list} = ""
	for %each {%{%list}}
		%count = @str(!count)
		colplace(m_matrix, {%each}, !count)
		if @rows(dropvector)>1 then	
			dropvector = dropvector.@droprow(1)
		vector e_{%list}_{%count} = m_matrix.@row(!count)
		e_{%list}_{%count} = e_{%list}_{%count}.@droprow(dropvector)
		else
		vector e_{%list}_{%count} = m_matrix.@row(!count)	
		endif
		%e_{%list} = %e_{%list} + "e_"+%list+"_"+%row+" "
		!count=!count+1
	next
next

'STEP 4: Creating the Forecast Evaluation Table
logmsg STEP4: Creating the Forecast Evaluation Table

table t_result

t_result(1,3) = "STEPS AHEAD ==>"
t_result(2,1) = "EQUATION"
t_result(3,1) = %eq
t_result(3,2) = "FORECASTS:"
t_result(4,2) = %err_measure+":"

!indent = t_result.@cols+1

vector(!toteqs) V_{%err_measure}

for !col=1 to !toteqs
	%head = @str(!col)
	t_result(2, !col+!indent) = %head
	
	%counter = @str(!col)
	'Absolute Errors
	!MAE  = @mean(@abs(e_v_err_{%counter}))
	!MSE = @mean(@epow(e_v_err_{%counter},2))
	!MSFE = !MSE
	!RMSE = @sqrt(!MSE)
	!medAE = @median(@abs(e_v_err_{%counter}))
	
	'Percentage Errors
	!MAPE = @mean(@abs(e_v_err_pc_{%counter}))
	!MPE = @mean(e_v_err_pc_{%counter})
	!MSPE = @mean(@epow(e_v_err_pc_{%counter},2))
	!RMSPE = @sqrt(!MSPE)
	!SMAPE = @mean(e_v_err_pc_{%counter})
	!medPE = @med(@abs(e_v_err_pc_{%counter}))
	
	v_{%err_measure}(!col) = !{%err_measure}	
	t_result(4, !col+!indent) = !{%err_measure}	
next

!cols = @columns(t_result)
t_result.setformat(R3C3:R4C{!cols}) f.3 'only display three decimal places
t_result.setlines(R2C1:R2C{!cols}) +b 'underline the header row
		
show t_result

'STEP 5: Creaing a Single Vector of Errors
logmsg Step 5: Creating a Single Vector of Errors

wfselect {%wf}\{%pagename}
%resulttablename = @getnextname("t_result_")
%errorvecotrname = @getnextname("v_"+%err_measure+"_")

copy {%newpage}\t_result {%pagename}\{%resulttablename}
copy {%newpage}\v_{%err_measure} {%pagename}\{%errorvecotrname}

if !keep = 1 then
	for %each {%forecastseries}
		%seriesname = @getnextname(%each+"_")
		copy {%newpage}\{%each} {%pagename}\{%seriesname}
	next
endif

pagedelete {%newpage}

'if this was run from the GUI (on one equation), show the table of results
wfselect {%wf}\{%pagename}
if !dogui=1 then
	show {%resulttablename}
endif

'Program Complete
logmsg Program is Complete


=======
'Author: James Lamb, Abbott Economics

'Motivation: Perform rolling time-series corss validation.

'Description: 
' 	Program which takes an equation, rolls the sample, keeps producing forecasts,
' 	then stacks up vectors by horizon and computes errors at different horizons.
' 	Returns a few objects in the wf:
'		1. T_ACC --> a table with the eq name and error (see below) by forecast horizon
'		2. V_{%eq}_{%ERR_MEASURE} --> a vector for the given equation, where element 1 is 1-step-ahead, elem 2 is 2-step, etc.

'##########################################################################################################
'##########################################################################################################
'##########################################################################################################
setmaxerrs 1
mode quiet
logmode logmsg
logmsg

'NOTE: Currently only supports equation objects (no VARs)
		
		!debug = 1 'set to 1 if you want the logmsgs to display
	
		if !debug = 0 then
			logmode +addin
		endif
		
		!dogui = 1 'Get data from the GUI
		
		'check that an object exists
		%type = @getthistype
		if %type="NONE" then
			@uiprompt("No object found, please open an Equation or VAR object")
			stop
		endif
		
		'check that {%eq} object is an equation or VAR
		if %type<>"EQUATION" and %type<>"VAR" then
			@uiprompt("Procedure can only be run from an Equation or VAR object")
			stop
		endif
		
		'Option 1 = the training range (from which many training samples will be drawn)
		if @len(@option(1)) > 0 then
			%training_range = @equaloption("TRAIN")
			logmsg --- longest sample %training_range
			!dogui = 0 'if we get here, it must mean that this is being run programmatically
		endif
		
		'Option 2 =  what % of the sample should we use to test?
		if @len(@option(1)) > 0 then
			!holdout = @val(@equaloption("H")) 'maximum % of the training range to forecast over
		endif

		'Option 3 = What error measure do you prefer?
		if @len(@option(3)) > 0 then
			%err_measure = @equaloption("ERR") 
		endif

		'Option 4 = Do you want to keep the forecast series objects?
		!keep_fcst = 0
		if @len(@option(4)) > 0 then
			%keep = @equaloption("K")
			!keep_fcst = (@upper(%keep)="TRUE") or (@upper(@left(%keep,1))="T")
		endif
		
		'--- Environment Info ---'
		%freq = @pagefreq 'page frequency
		%pagesmpl = @pagesmpl
		%pagename = @pagename
		%wf = @wfname
		%eq = _this.@name 'get the name of whatever we're using this on
		%command = {%eq}.@command 'command to re-estimate (with all the same options)
		
		'Set up the GUI
		if !dogui = 1 then
			!keep_fcst = 0
			%error_types = " ""MSE"" ""MAE"" ""RMSE"" ""MSFE"" ""medAE"" ""MAPE"" ""SMAPE"" ""MPE"" ""MSPE"" ""RMSPE"" ""medPE"" ""Correct sign (count)"" ""Correct sign (%)"" " 
			
			'Initialize with reasonable values
			%holdout = "0.10" 'default to testing over 10% of the training range
			%training_range = %training_range
			%err_measure = "MAE"
			!keep_fcst = 0
			
			!result = @uidialog("edit", %training_range, "Training range", "edit", %holdout, "Maximum % of the training range to hold out", _
			"list", %err_measure, "Preferred error measure", %error_types, "Check", !keep_fcst, "Keep the forecast series objects?" )
			
			'Map human-readable values to params
			if %err_measure = "Correct sign (count)" then
				%err_measure = "SIGN"
			endif
			if %err_measure = "Correct sign (%)" then
				%err_measure = "SIGNP"
			endif
			
			!holdout = @val(%holdout)

		endif
		
		'Grab a bit of information from the equation
		wfselect {%wf}\{%pagename}
		
		if %type = "EQUATION" then
			smpl @all
				{%eq}.makeregs g1
				%base_dep = @word(g1.@depends,1) 'dependent variable WITHOUT transformations
				
				stomna(g1,m1)
				
				'Need to potentially adjust the training_range to accoutn for NAs in the passed-in training range
				%earliest_possible = @otod(@max(@cifirst(m1)))
				%latest_possible = @otod(@min(@cilast(m1)))
				'If the earliest possible obs is earlier than the start of training range, adjust the training range up
				if @dtoo(%earliest_possible) > @dtoo(@word(%training_range,1)) then
					%training_range = @replace(%training_range, @word(%training_range,1), %earliest_possible)
				endif
				'If the latest possible obs is earlier than the end of training range, adjust the training range down
				if @dtoo(%latest_possible) <  @dtoo(@word(%training_range,2)) then
					%training_range = @replace(%training_range, @word(%training_range,2), %latest_possible)
				endif
				delete g1 m1
			smpl @all
		else
			if %type = "VAR" then
	
				'Turn the VAR into a model
				_this.makemodel(_m_temp)
				
				'Get the variable list
				%vars = _m_temp.@varlist
				group g1 {%vars}
				
				'Take in the argument "DEP", only passed for VAR objects, which tells which of the variables we care about validating
				if !dogui = 0 then
					%base_dep = @equaloption("DEP")
				else
					%base_dep = @word(%vars,1)
				endif
				
				'Is this valid?
				if @wfind(%vars, %base_dep) = 0 then
					%exception = %base_dep + " is not a valid variable in " + %eq + "."
					@uiprompt(%exception)
					stop
				endif
				
				smpl @all
					stomna(g1,m1)
					'Need to potentially adjust the training_range to accoutn for NAs in the passed-in training range
					%earliest_possible = @otod(@max(@cifirst(m1)))
					%latest_possible = @otod(@min(@cilast(m1)))
					%training_range = %earliest_possible + " " + %latest_possible
					'If the earliest possible obs is earlier than the start of training range, adjust the training range up
					if @dtoo(%earliest_possible) > @dtoo(@word(%training_range,1)) then
						%training_range = @replace(%training_range, @word(%training_range,1), %earliest_possible)
					endif
					'If the latest possible obs is earlier than the end of training range, adjust the training range down
					if @dtoo(%latest_possible) <  @dtoo(@word(%training_range,2)) then
						%training_range = @replace(%training_range, @word(%training_range,2), %latest_possible)
					endif
					delete g1 m1 _m_temp
				smpl @all
				
			endif
		endif

		'Get params
		'---- Passed in ------'
'		%eq = {%0} 'equation object to work with
'		%short_end = {%1} 'end of the shortest sample to forecast over
'		%longest_smpl = {%2} 'What is the longest sample to estiamte? e.g. "1990 2015M10"
'		%err_measure = {%3} 'what error measure do you prefer? 
'			'Valid options:
''				a. "MSE" = mean squared error
''				b. "MAE" = mean absolute error
''				c. "RMSE" = root mean squuared error
''				d. "MSFE" = mean squared forecast error
''				e. "medAE" = median absolute error
''				f. "MAPE" = mean absolute percent error
''				g. "MPE" = mean percentage error
''				h. "MSPE" = mean squared percentage error
''				u. "RMSPE" = root mean squared percentage error
'				j. "medPE" = median percentage error
''				k. "SIGN" = count of the number of times the forecast guess the correct direction of change
''				l. "SIGN_PERCENT" = percent of the times that we guessed the sign of the forecast correctly
'				m. "SMAPE" = symmetric MAPE (see http://robjhyndman.com/hyndsight/smape/
'			
'		%keep_fcst = {%4} 'Set to "TRUE" or "T" to avoid deleting the forecast series
			
		%newpage = "TMPAAAAA" 'give it a ridiculous name to avoid overwriting stuff
		pagecreate(page={%newpage}) {%freq} {%pagesmpl} 'give it a crazy name to minimize risk of overwriting things
		wfselect {%wf}\{%newpage}
		
		'Create a group of regressors and copy it over
		'NOTE: This will take only the base series. If the reg. has CPI and d(CPI), only CPI is copied
		wfselect {%wf}\{%pagename}
		%rgroup = "g_blahblah"
		
		if %type = "EQUATION" then
			{%eq}.makeregs {%rgroup}
		else
			if %type = "VAR" then
				'Turn the VAR into a model
				_this.makemodel(_m_temp)
				
				'Get the variable list
				%vars = _m_temp.@varlist
				group {%rgroup} {%vars}	
				
				delete _m_temp
			endif
		endif
		
		{%rgroup}.drop @trend @trend^2 log(@trend)
		copy(g=d) {%pagename}\{%rgroup} {%newpage}\{%rgroup} '(g=d) --> series only (not the group object
		
		'delete that group
		delete {%pagename}\{%rgroup}
		
		copy {%pagename}\{%eq} {%newpage}\{%eq}
		wfselect {%wf}\{%newpage}
		
		'---- Date format ----'
		%freq = @pagefreq
	
		if %freq = "A" then 
			%date_format = "YYYY"
		else
			if %freq = "Q" then
				%date_format = "YYYY[Q]Q"
			else
				if %freq = "M" then
					%date_format = "YYYY[M]MM"
				else
					if @wfind("W D5 D7 D", %freq) <> 0 then
						%date_format = "MM/DD/YYYY"
					endif
				endif
			endif
		endif
		
		'Return this string in a workfile object
		string date_fmt = %date_format
		
		logmsg --- got past date format
		
	logmsg --- Beginning rolling estimation and forecasting
			
		!init_obs = @round( (1-!holdout) * (@dtoo(@word(%training_range,2)) - @dtoo(@word(%training_range,1))) ) + @dtoo(%earliest_possible) 		
		%short_end = @otod(!init_obs)
			
		%start_est = @word(%training_range,1) 'where should estimation start?
		%end_est = @word(%training_range,2) 'where should the longest estimation end?
		!tot_eqs = @dtoo(%end_est) - @dtoo(%short_end) 'number of estimations we'll do
		
		for !i = 0 to !tot_eqs-1
			
			'Estimate the model for this sample
			%end_est = @datestr(@dateadd(@dateval(%short_end), +{!i}, %freq), date_fmt)
			%est_smpl = %start_est + " " + %end_est
			logmsg --- Estimating {%eq} over sample %est_smpl
			
			smpl {%est_smpl}
				{%eq}.{%command} 're-estimates the equation or VAR
				
			'Forecast over all the remaining periods
			%start_fcst = @datestr(@dateadd(@dateval(%end_est), +1, %freq), date_fmt)
			
			smpl {%start_fcst} @last
				if %type = "EQUATION" then
					{%eq}.forecast(f=na) {%base_dep}_f_{%start_fcst}
				else
					if %type = "VAR" then
						
						{%eq}.forecast(f=na) _f 'just pass a suffix, not a full name (can only be 3 characters)
						rename {%base_dep}_f {%base_dep}_f_{%start_fcst} 'get back to the form we want
						
						'The (f=na) command for VARs has been buggy...manually do its work for now
						smpl @first {%end_est}
							{%base_dep}_f_{%start_fcst} = NA
						smpl @all
					endif
				endif
			smpl @all
		next
		logmsg --- got through all the rolling and forecasting
		
	logmsg --- Creating Series and Vectors of Errors
	
		%lookup = %base_dep + "_F_*"
		%list = @wlookup(%lookup, "series")
		for %series {%list}
			
			smpl @all
			
				%prefx = %base_dep + "_F_"
				
				'Absolute errors
				%error_ser = @replace(%series, %prefx, "ERR_")
				%error_vec = @replace(%series, %prefx, "V_ERR_")
				series {%error_ser} = {%base_dep} - {%series} 'prediction is always of the level, not the transformation!
				vector {%error_vec} = @convert({%error_ser})
				
				'Percentage errors
				%pc_error_ser = @replace(%series, %prefx, "ERR_PC_") 'percentage error
				%pc_error_vec = @replace(%series, %prefx, "V_PCERR_") 'percentage error
				series {%pc_error_ser} = 100*({%base_dep} - {%series})/({%base_dep}) 'report in percentage point units (thus the *100)
				vector {%pc_error_vec} = @convert({%pc_error_ser})
				
				'Sign errors (should be over the horizon. So 2 step ahead asks: "Did we correctly predict the direction of change between two pers ago and today?")
				%sign_error_ser = @replace(%series, %prefx, "ERR_SGN_") 'sign error
				%sign_error_vec = @replace(%series, %prefx, "V_SGNERR_") 'sign error
					
					'Find the last observation of history (before we started this particular forecast
					%end_hist = @otod(@dtoo({%series}.@first) - 1) 'The period before the forecast starts is where estimation ended
					!hist_point = @elem({%base_dep},%end_hist) 'grab that value from the end of the history
					
					'Get a series of actual changes in the history
					series changes = {%base_dep} - @elem({%base_dep}, %end_hist)
					changes = @recode(changes=0, 1e-03, changes) 'recode 0s to small positive (want to treat  0 as positive)
					
					'If change in fcst and change in actual are in the same direction, the sign was correct
					series {%sign_error_ser} = (({%series} -  @elem({%base_dep}, %end_hist)) / changes) > 0 '1 if correct sign, 0 otherwise
					vector {%sign_error_vec} = @convert({%sign_error_ser})
					
				'Sums for sMAPE (see http://robjhyndman.com/hyndsight/smape/)
				%sym_error_ser = @replace(%series, %prefx, "ERR_SYM_")
				%sym_error_vec = @replace(%series, %prefx, "V_SYMERR_")
				series {%sym_error_ser} = 2*@abs({%base_dep} - {%series})/(@abs({%base_dep}) + @abs({%series}))
				vector {%sym_error_vec} = @convert({%sym_error_ser})
	
			smpl @all
			
		next
		logmsg --- got through creating series and vectors of errors

	logmsg --- Collecting the n-step-ahead errors
		
		'Absolute errors
		%list = @wlookup("v_err_*", "vector")
		for %vector {%list}
			
			for !indx = 1 to @wcount(%list)
				%newvec = "e_vec_" + @str(!indx)
				if @isobject(%newvec) = 0 then
					'create them
					vector(@wcount(%list)) {%newvec} = NA
					
					'Add metadata
					%desc = "Vector of " + @str(!indx) + "-step-ahead forecasts from equation " + %eq
					{%newvec}.setattr(Description) {%desc}
					
					'Fill the first element of the vector
					{%newvec}(1) = {%vector}(!indx)
				else
					!next_row = @obs({%newvec}) + 1
					if @obs({%vector}) >= !indx then
						{%newvec}(!next_row) = {%vector}(!indx)
					endif
				endif
			next
		next
		
		'Percent errors
		%list = @wlookup("v_pcerr_*", "vector")
		for %vector {%list}
			
			for !indx = 1 to @wcount(%list)
				%newvec = "e_pcvec_" + @str(!indx)
				if @isobject(%newvec) = 0 then
					'create them
					vector(@wcount(%list)) {%newvec} = NA
					
					'Add metadata
					%desc = "Vector of " + @str(!indx) + "-step-ahead forecasts from equation " + %eq
					{%newvec}.setattr(Description) {%desc}
					
					'Fill the first element of the vector
					{%newvec}(1) = {%vector}(!indx)
				else
					!next_row = @obs({%newvec}) + 1
					if @obs({%vector}) >= !indx then
						{%newvec}(!next_row) = {%vector}(!indx)
					endif
				endif
			next
		next
		
		'Sign errors
		%list = @wlookup("v_sgnerr_*", "vector")
		for %vector {%list}
			
			for !indx = 1 to @wcount(%list)
				%newvec = "e_sgnvec_" + @str(!indx)
				if @isobject(%newvec) = 0 then
					'create them
					vector(@wcount(%list)) {%newvec} = NA
					
					'Add metadata
					%desc = "Vector of " + @str(!indx) + "-step-ahead forecasts from equation " + %eq
					{%newvec}.setattr(Description) {%desc}
					
					'Fill the first element of the vector
					{%newvec}(1) = {%vector}(!indx)
				else
					!next_row = @obs({%newvec}) + 1
					if @obs({%vector}) >= !indx then
						{%newvec}(!next_row) = {%vector}(!indx)
					endif
				endif
			next
		next
		
		'sMAPE errors
		%list = @wlookup("v_symerr_*", "vector")
		
		!stuff = @wcount(%list)
		for %vector {%list}
			
			for !indx = 1 to @wcount(%list)
				%newvec = "e_symvec_" + @str(!indx)
				if @isobject(%newvec) = 0 then
					
					'create them
					vector(@wcount(%list)) {%newvec} = NA
					
					'Add metadata
					%desc = "Vector of " + @str(!indx) + "-step-ahead forecasts from equation " + %eq
					{%newvec}.setattr(Description) {%desc}
					
					'Fill the first element of the vector
					{%newvec}(1) = {%vector}(!indx)
				else
					!next_row = @obs({%newvec}) + 1
					if @obs({%vector}) >= !indx then
						{%newvec}(!next_row) = {%vector}(!indx)
					endif
				endif
			next
		next
		
	logmsg --- Creating the Forecast Eval table
	
		table t_acc
		%err_vecs = @wlookup("e_vec_*", "vector")
		t_acc(1,3) = "STEPS AHEAD -->"
		t_acc(2,1) = "Model"
		t_acc(3,1) = %eq
		t_acc(3,2) = "Forecasts:"
		t_acc(4,1) = %eq
		%err_txt = %err_measure + ":"
		t_acc(4,2) = %err_txt
		for !col = 3 to (@wcount(%err_vecs)+2)
			
			'Assign a header to the table indicating how many steps ahead
			%head = @str(!col - 2)
			t_acc(2, !col) = %head
			
			'How many forecasts did we have at this horizon?
			%vec = "E_VEC_" + %head
			%pc_vec = "E_PCVEC_" + %head 'percentage errors
			%sign_vec = "E_SGNVEC_" + %head
			%sym_vec = "E_SYMVEC_" + %head
			!obs = @obs({%vec})
			t_acc(3, !col) = @str(!obs)
			
			'How did they do?
			
			'Absolute errors
			!MAE = @mean(@abs({%vec}))
			!MSE = @mean(@epow({%vec},2))
			!MSFE = !MSE  'some people use different terms
			!RMSE = @sqrt(!MSE)
			!medAE = @median(@abs({%vec}))
			
			'Percentage errors
			!MAPE = @mean(@abs({%pc_vec}))
			!MPE = @mean({%pc_vec})
			!MSPE = @mean(@epow({%pc_vec},2))
			!RMSPE = @sqrt(!MSPE)
			!SMAPE = @mean({%sym_vec})
			!medPE = @med(@abs({%pc_vec}))
			
			'Sign Errors
			!SIGN = @sum({%sign_vec})
			!SIGNP = 100*(!SIGN/@obs({%sign_vec}))
			
			t_acc(4,!col) =!{%err_measure}
		next
		!cols = @columns(t_acc)
		t_acc.setformat(R3C3:R4C{!cols}) f.3 'only display three decimal places
		t_acc.setlines(R2C1:R2C{!cols}) +b 'underline the header row
		
		show t_acc
		
	logmsg --- Creating a single vector of errors
	
		wfselect {%wf}\{%newpage}
		'Element 1 will be 1-step-ahead MSE, element 2 will be 2-step-ahead-MSE, etc.
		!steps = @columns(t_acc) - 2
		vector(!steps) v_{%eq}_{%err_measure} = NA
		for !col = 3 to (!steps + 2)
			!indx = !col - 2
			v_{%eq}_{%err_measure}(!indx) = @val(t_acc(4,!col)) 'errors always in row 4
		next
	
	logmsg --- Move everything left back over to the original page
	
		copy {%newpage}\t_acc {%pagename}\t_acc
		copy {%newpage}\v_{%eq}_{%err_measure}* {%pagename}\v_{%eq}_{%err_measure}*
		if !keep_fcst = 1 then
			copy {%newpage}\{%base_dep}_f_* {%pagename}\{%base_dep}_f_*
		endif
		pagedelete {%newpage}
		wfselect {%wf}\{%pagename}
		
		'if this was run from the GUI (on one equation), show the table of results
		if !dogui = 1 then
			show t_acc
		endif
		
	logmsg
	logmsg ------ TSCVAL COMPLETE ------
	logmsg
		
'##########################################################################################################
'##########################################################################################################
'##########################################################################################################
'===========================================References===================================================='
'
'1. http://faculty.smu.edu/tfomby/eco5385/lecture/Scoring%20Measures%20for%20Prediction%20Problems.pdf
'2. http://robjhyndman.com/hyndsight/tscvexample/
'3. http://robjhyndman.com/hyndsight/crossvalidation/
'4. http://robjhyndman.com/hyndsight/smape/
'5. http://robjhyndman.com/papers/foresight.pdf


>>>>>>> 6471b5aa0082a5bfb56751bd1c5ef6577f9e07d8
